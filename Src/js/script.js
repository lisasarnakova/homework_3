/*
В каждой задаче нужно оставлять короткие комментарии, которые описывают смысл вашего кода - это обязательно

Задачи:

1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). 
Эта функция принимает в себя целое число со значением длины ребра куба. 
Ответ выведите в формате строки, который изображен в примерах.
Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"

Примеры:

calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'
calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'
calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'
calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'
calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'*/

function calculateVolumeAndArea(length) { // создаем функцию
    if (Number.isInteger(length) && length > 0) { // проверяем, является ли аргумент целым положительным числом
        const volume = length ** 3 // вычисление объема куба
        const area = 6 * (length ** 2) // вычисление площади поверхности куба
        return (`Объем куба: ${volume}, площадь всей поверхности: ${area}`) // выводим строку с нужными значениями
    } 
    else { // если аргумент не прошел проверку, выводим сообщение об ошибке
        return 'При вычислении произошла ошибка'
    }
}
console.log(calculateVolumeAndArea(5)) // задаем значение ребра и выводим результат в консоль
  

/*
2) Напишите функцию, которая будет определять номер купе по переданному ей номеру места. Функция принимает только целое число от 1 до 36.
Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение: "Ошибка. Проверьте правильность введенного номера места"
Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"

Пример:
getCoupeNumber(33)  => 9
getCoupeNumber(7)  => 2
getCoupeNumber(300)  => "Таких мест в вагоне не существует"
getCoupeNumber(0)  => "Таких мест в вагоне не существует"
getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"
getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"
getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места"*/

function getCoupeNumber(seatNumber) {
    if (!Number.isInteger(seatNumber) || seatNumber < 0){
        return 'Ошибка. Проверьте правильность введенного номера места'
    } 
    else if (seatNumber <= 0 || seatNumber > 36){
        return 'Таких мест в вагоне не существует'
    }
    else {
        const coupeNumber = Math.ceil(seatNumber / 4)
        return coupeNumber
    }
}
console.log(getCoupeNumber(33))  

/*3) Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
Для определения типа данных используйте typeof();
Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]*/

const originalArray = [5, 10, 'Shopping', 20, 'Homework']

const modifiedArray = originalArray.map(item => {
    if (typeof item === 'number') {
        return item * 2
    }
    else if (typeof item === 'string') {
        return item + ' - done'
    }
})

console.log(modifiedArray)

/*4) Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]
ВАЖНО: нельзя использовать функцию reverse у массива*/

const data = [5, 10, 'Shopping', 20, 'Homework']
const result = []

for (let i = data.length - 1; i >= 0; i--) {
    result.push(data[i])
}

console.log(result)

/*5) Напишите функцию showFamily, которая будет принимать в себя массив строк и возвращать сообщение в нужном формате.
showFamily(family)  => 'Семья состоит из: Peter Ann Alex Linda'
Имена подставляются автоматически из массива. Если массив пустой, то выводится сообщение 'Семья пуста'*/

function showFamily(family) {
    if (family.length === 0) {
        return 'Семья пуста'
    } 
    else {
        const message = 'Семья состоит из: ' + family.join(' ')
        return message
    }
}
const family1 = ['Аня', 'Костя', 'Люба', 'Маша']
console.log(showFamily(family1))
  
const family2 = []
console.log(showFamily(family2))
  

/*6) Задания на поиск ошибок в коде
У вас есть объект с данными о ресторане. Начинающий разработчик создал несколько функций, которые работают неправильно и он не может понять почему. 
Нужно исправить функции так, чтобы они давали всегда правильный результат. Все функции и объект написаны ниже

    6.1) Функция isOpen не хочет правильно работать. Что мы уже не пробовали подставлять в неё - результат все время неправильный. 
    Необходимо найти причины, написать причины в виде комментария и исправить их.

    6.2) Функция isAverageLunchPriceTrue должна брать цены двух любых блюд из меню, складывать их и сравнивать с средним чеком (averageLunchPrice).
        Сейчас функция работает, но постоянно выдает неправильный результат. 
        Ведь из представленного меню сумма двух любых цен всегда будет больше 20. Необходимо найти причины, написать причины в виде комментария и исправить их.
*/

const restorantData = {
    menu: [
      {
        name: 'Salad Caesar',
        price: '14$',
      },
      {
        name: 'Pizza Diavola',
        price: '9$',
      },
      {
        name: 'Beefsteak',
        price: '17$',
      },
      {
        name: 'Napoleon',
        price: '7$',
      },
    ],
    waitors: [
      { name: 'Alice', age: 22 },
      { name: 'John', age: 24 },
    ],
    averageLunchPrice: '20$',
    openNow: true,
}

function isOpen(prop) {
    let answer = ''
    prop ? (answer = 'Открыто') : (answer = 'Закрыто') // поменяла местами 'Открыто' и 'Закрыто' по принципу работы тернарного оператора: условие ? значение1 : значение2.
    // Сначала вычисляется условие: если оно истинно, тогда возвращается значение1, в противном случае – значение2.
    return answer // изменила название переменной - была ошибка (s стояла после w)
}
  
console.log(isOpen(restorantData.openNow)) //добавила 'restorantData.', так как нужно указать, где находится 'openNow'
  
function isAverageLunchPriceTrue(fDish, sDish, average) {
    if (parseInt(fDish.price) + parseInt(sDish.price) < parseInt(average)) { // присутствовали лишние знаки '<', '+', убрала их и '.slice(0, -1)', а также добавила parseInt для перевода строки с '$' в число
      return 'Цена ниже средней'
    } else {
      return 'Цена выше средней'
    }
}
  
console.log(
    isAverageLunchPriceTrue(
        restorantData.menu[0],
        restorantData.menu[1],
        restorantData.averageLunchPrice
    )
)
  
function transferWaitors(data) {
    const copy = Object.assign({}, data)
  
    copy.waitors[0] = { name: 'Mike', age: 32 }
    return copy
}
  
transferWaitors(restorantData)


/*** Усложненная задача - необязательная задача, но дающая сверху 1 балл к оценке за решение
Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода.
Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:

     *
    ***
   *****
  *******
 *********
***********

Количество звездочек можете задавать напрямую в коде или через дополнительную переменную - не столь важно.
(Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. 
    В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС - это будет проверяться)
*/
const numberOfRows = 6
for (let i = 1; i <= numberOfRows; i++) {
    let spaces = ' '.repeat(6 - i)
    let stars = '*'.repeat(2 * i - 1)
    if (i === numberOfRows) {
        console.log(spaces + stars + '\n')
    }
    else {
        console.log(spaces + stars)
    }
}
  